version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: nerget-postgres
    environment:
      POSTGRES_DB: nerget
      POSTGRES_USER: nerget_user
      POSTGRES_PASSWORD: nerget_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - nerget-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nerget_user -d nerget"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build: .
    container_name: nerget-api
    environment:
      # Database configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/nerget
      SPRING_DATASOURCE_USERNAME: nerget_user
      SPRING_DATASOURCE_PASSWORD: nerget_password
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      
      # JPA configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: true
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: true
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      
      # Server configuration
      SERVER_PORT: 8080
      SERVER_ADDRESS: 0.0.0.0
      
      # Google OAuth (keep existing values)
      GOOGLE_CLIENT_ID: 1076507336995-uo4b83nsjjc24rcot71546lntebifp5k.apps.googleusercontent.com
      GOOGLE_CLIENT_SECRET: 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
      
      # S3 configuration
      APP_S3_PUBLIC_BASE_URL: https://my-bucket.s3.ap-northeast-2.amazonaws.com
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - nerget-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  nerget-network:
    driver: bridge
